'use strict'

let gameChoices = []
// generated by level 1
gameChoices.push(Math.floor(Math.random()*4+1))
gameChoices.push(Math.floor(Math.random()*4+1))

let playerChoices = []
let level = 1
let mistakes = 0

let guesses = 0;


function startGame(){
        const numOfGameChoices = gameChoices.length
        let indexOfGameChoices = 0;
        const loopThroughButtons = (n, action)=>{
            
            for (let i = 1; i <= n; i++) {
                setTimeout( () =>{
                    if (action=='revealColours'){
                        document.querySelector(`.b${gameChoices.at(i-1)}`).classList.add('clicked-button')
                    } else if (action=='hideColours'){
                        document.querySelector(`.b${gameChoices.at(i-1)}`).classList.remove('clicked-button')
                    }
                    indexOfGameChoices++
                    // after showing and hidding the colours, the game shows that it is time for the user to play by using an animation
                    if (numOfGameChoices*2 == indexOfGameChoices){
                        animate(10)
                    }
                }, i * 1000)
            }
        }
        loopThroughButtons(gameChoices.length, 'revealColours')
        setTimeout(() => {
            loopThroughButtons(gameChoices.length, 'hideColours')
        }, 1000)


        

        // animation
        const animate = (numOfEffects)=>{
            for (let i = 1; i <= numOfEffects; i++) {
                setTimeout(() => {
                    if (i % 2 != 0){
                        document.querySelector('body').classList.add("success"); // show effects
                    } else {
                        document.querySelector('body').classList.remove("success"); // clear effects
                    }
                    
                    if (i==10){listenForGuesses()} // after the animation is finally showed to the user then and only then the user can play the game/round
                }, i * 10)
            }
        }
        

    
    

}


function afterClick(){
    const buttons = document.querySelectorAll('.button')
    playerChoices.push(this.getAttribute("class").split(' ')[1][1])
    if (guesses==gameChoices.length-1){ // if the user has choiced all colours
        for (const button of buttons){button.removeEventListener("click", afterClick)};
        checkGuesses('all');
    } else { // if the user has choiced one or more colours but not all
        checkGuesses(guesses)
        guesses++
    }
}

function listenForGuesses(){
    const buttons = document.querySelectorAll('.button')
    for (const button of buttons){
        button.addEventListener("click", afterClick)
    }
}

function checkGuesses(indexOfColour){
    if (indexOfColour != 'all'){ // if the user hasn't used his/her ALL turns
        if (playerChoices[indexOfColour]!=gameChoices[indexOfColour]){
            showMistake()
        }

    } else { // if the user has used his/her ALL turns
        function checkEquality(){
            let result;
            for (let i=0; i<gameChoices.length; i++){
                if (playerChoices[i] != gameChoices[i]){result = false}
            }
            if (result==undefined){result=true}
            return result
        }
        
        let result = checkEquality()
        if (result){nextLevel()} else {showMistake()}

    }
}


function showMistake(){
    // if mistakes are already 2 > this adds the last (third) mistakes and redirects the user to a loser screen
    if (mistakes==2){
        window.location.href = "gameover.html";
    } else {
    document.querySelector('.mistakes').innerHTML = ++mistakes

    // show failure screen
    document.querySelector('body').classList.add("show-mistake");
    setTimeout(() => {

        document.querySelector('body').classList.remove("show-mistake");
    }, 100)  

    // removes the eventListener(s)
    const buttons = document.querySelectorAll('.button')
    for (const button of buttons){button.removeEventListener("click", afterClick)}

    // clears the previously choiced colours and guesses 
    playerChoices = []
    guesses = 0
    startGame() //restart
    }
}

function nextLevel(){
    document.querySelector('.level').innerHTML = ++level
        // show win screen
    document.querySelector('body').classList.add("success");
    setTimeout(() => {

        document.querySelector('body').classList.remove("success");
    }, 100)

    // additional difficulty
    gameChoices.push(Math.floor(Math.random()*4+1))

    // reset 
    playerChoices = []
    guesses = 0

    startGame()
}




const startButton = document.getElementById('start-button')
// startButton.addEventListener("click", function a(){
    document.querySelector('body').classList.add("success");
    setTimeout(() => {

        document.querySelector('body').classList.remove("success");
    }, 100)   

    startButton.classList.add('hidden');
    // startButton.removeEventListener("click", a);
    startGame()

//  });



